analyzer:
  # Use strog mode
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  # See all errors at https://github.com/dart-lang/sdk/blob/master/pkg/analyzer/lib/error/error.dart
  errors:    
    # INFO -> WARNING

    # Required parameter is missing.
    missing_required_param: warning

    # Function has a return type, but doesn't end with a return statement.
    missing_return: warning

    # INFO -> IGNORE
    
    # Allow TODOs
    todo: ignore
# See all rules at https://dart-lang.github.io/linter/lints/index.html
linter:
  rules:
    # Error Rules

    # Avoid relative imports for files in lib/.
    # https://dart-lang.github.io/linter/lints/always_use_package_imports.html
    # - always_use_package_imports

    # Avoid empty else statements.
    # [flutter] [pedantic]
    # https://dart-lang.github.io/linter/lints/avoid_empty_else.html
    - avoid_empty_else

    # Avoid print calls in production code.
    # https://dart-lang.github.io/linter/lints/avoid_print.html
    # - avoid_print

    # Avoid relative imports for files in lib/.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_relative_lib_imports.html
    - avoid_relative_lib_imports

    # Avoid returning null for Future.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    # - avoid_returning_null_for_future
    
    # Avoid slow async dart:io methods.
    # https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    # - avoid_slow_async_io
    
    # Avoid .toString() in production code since results may be minified.
    # https://dart-lang.github.io/linter/lints/avoid_type_to_string.html
    # - avoid_type_to_string
    
    # Avoid types as parameter names.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/avoid_types_as_parameter_names.html
    - avoid_types_as_parameter_names

    # Avoid using web-only libraries outside Flutter web plugin packages.
    # [flutter]
    # (experimental)
    # https://dart-lang.github.io/linter/lints/avoid_web_libraries_in_flutter.html
    - avoid_web_libraries_in_flutter 

    # Cancel instances of dart.async.StreamSubscription.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/cancel_subscriptions.html
    # - cancel_subscriptions
    
    # Close instances of dart.core.Sink.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/close_sinks.html
    # - close_sinks

    # Only reference in scope identifiers in doc comments.
    # https://dart-lang.github.io/linter/lints/comment_references.html
    # - comment_references

    # Avoid control flow in finally blocks.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/control_flow_in_finally.html
    # - control_flow_in_finally

    # DO reference all public properties in debug methods.
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    # - diagnostic_describe_all_properties

    # Avoid empty statements.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/empty_statements.html
    # - empty_statements

    # Always override hashCode if overriding ==.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/hash_and_equals.html
    # - hash_and_equals

    # Conditions should not unconditionally evaluate to true or to false.
    # (experimental)
    # https://dart-lang.github.io/linter/lints/invariant_booleans.html
    # - invariant_booleans

    # Invocation of Iterable.contains with references of unrelated types.
    # https://dart-lang.github.io/linter/lints/iterable_contains_unrelated_type.html
    # - iterable_contains_unrelated_type

    # Invocation of remove with references of unrelated types.
    # https://dart-lang.github.io/linter/lints/list_remove_unrelated_type.html
    # - list_remove_unrelated_type

    # Boolean expression composed only with literals.
    # https://dart-lang.github.io/linter/lints/literal_only_boolean_expressions.html
    # - literal_only_boolean_expressions

    # Don't use adjacent strings in list.
    # https://dart-lang.github.io/linter/lints/no_adjacent_strings_in_list.html
    # - no_adjacent_strings_in_list

    # Don't use more than one case with same value.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/no_duplicate_case_values.html
    - no_duplicate_case_values

    # Don't put any logic in createState.
    # https://dart-lang.github.io/linter/lints/no_logic_in_create_state.html
    # - no_logic_in_create_state

    # Prefer relative imports for files in lib/.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_relative_imports.html
    # - prefer_relative_imports

    # Don't use the Null type, unless you are positive that you don't want void.
    # https://dart-lang.github.io/linter/lints/prefer_void_to_null.html
    # - prefer_void_to_null

    # Test type arguments in operator ==(Object other).
    # [flutter]
    # https://dart-lang.github.io/linter/lints/test_types_in_equals.html
    # - test_types_in_equals

    # Avoid throw in finally block.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/throw_in_finally.html
    # - throw_in_finally

    # Avoid using unnecessary statements.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/unnecessary_statements.html
    # - unnecessary_statements

    # Equality operator == invocation with references of unrelated types.
    # [flutter] [pedantic]
    # https://dart-lang.github.io/linter/lints/unrelated_type_equality_checks.html
    - unrelated_type_equality_checks

    # Avoid unsafe HTML APIs.
    # https://dart-lang.github.io/linter/lints/unsafe_html.html
    # - unsafe_html

    # Use key in widget constructors.
    # https://dart-lang.github.io/linter/lints/use_key_in_widget_constructors.html
    # - use_key_in_widget_constructors

    # Use valid regular expression syntax.
    # [flutter] [pedantic]
    # https://dart-lang.github.io/linter/lints/valid_regexps.html
    - valid_regexps

    # Style Rules

    # Declare method return types.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/always_declare_return_types.html
    - always_declare_return_types

    # Separate the control structure expression from its statement.
    # https://dart-lang.github.io/linter/lints/always_put_control_body_on_new_line.html
    # - always_put_control_body_on_new_line

    # Put @required named parameters first.
    # https://dart-lang.github.io/linter/lints/always_put_required_named_parameters_first.html
    # - always_put_required_named_parameters_first

    # Specify @required on named parameters without defaults.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/always_require_non_null_named_parameters.html
    - always_require_non_null_named_parameters

    # Specify type annotations.
    # https://dart-lang.github.io/linter/lints/always_specify_types.html
    # - always_specify_types

    # Annotate overridden members.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/annotate_overrides.html
    - annotate_overrides

    # Avoid annotating with dynamic when not required.
    # https://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    # - avoid_annotating_with_dynamic

    # Avoid using as.
    # https://dart-lang.github.io/linter/lints/avoid_as.html
    # - avoid_as

    # Avoid bool literals in conditional expressions.
    # https://dart-lang.github.io/linter/lints/avoid_bool_literals_in_conditional_expressions.html
    - avoid_bool_literals_in_conditional_expressions

    # Avoid catches without on clauses.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    # - avoid_catches_without_on_clauses

    # Don't explicitly catch Error or types that implement it.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_catching_errors.html
    - avoid_catching_errors

    # Avoid defining a class that contains only static members.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_classes_with_only_static_members.html
    # - avoid_classes_with_only_static_members

    # Avoid double and int checks.
    # https://dart-lang.github.io/linter/lints/avoid_double_and_int_checks.html
    # - avoid_double_and_int_checks

    # Avoid overloading operator == and hashCode on classes not marked @immutable.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_equals_and_hash_code_on_mutable_classes.html
    # - avoid_equals_and_hash_code_on_mutable_classes

    # Avoid escaping inner quotes by converting surrounding quotes.
    # https://dart-lang.github.io/linter/lints/avoid_escaping_inner_quotes.html
    - avoid_escaping_inner_quotes

    # Avoid field initializers in const classes.
    # https://dart-lang.github.io/linter/lints/avoid_field_initializers_in_const_classes.html
    # - avoid_field_initializers_in_const_classes

    # Avoid using forEach with a function literal.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_function_literals_in_foreach_calls.html
    # - avoid_function_literals_in_foreach_calls

    # Don't implement classes that override ==.
    # https://dart-lang.github.io/linter/lints/avoid_implementing_value_types.html
    - avoid_implementing_value_types

    # Don't explicitly initialize variables to null.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_init_to_null.html
    - avoid_init_to_null

    # Avoid JavaScript rounded ints.
    # https://dart-lang.github.io/linter/lints/avoid_js_rounded_ints.html
    # - avoid_js_rounded_ints

    # Don't check for null in custom == operators.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_null_checks_in_equality_operators.html
    - avoid_null_checks_in_equality_operators

    # Avoid positional boolean parameters.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_positional_boolean_parameters.html
    - avoid_positional_boolean_parameters

    # Avoid private typedef functions.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_private_typedef_functions.html
    # - avoid_private_typedef_functions

    # Avoid redundant argument values.
    # https://dart-lang.github.io/linter/lints/avoid_redundant_argument_values.html
    # - avoid_redundant_argument_values

    # Don't rename parameters of overridden methods.
    # https://dart-lang.github.io/linter/lints/avoid_renaming_method_parameters.html
    - avoid_renaming_method_parameters

    # Avoid return types on setters.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_return_types_on_setters.html
    - avoid_return_types_on_setters

    # Avoid returning null from members whose return type is bool, double, int, or num.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_returning_null.html
    # - avoid_returning_null

    # Avoid returning null for void.
    # https://dart-lang.github.io/linter/lints/avoid_returning_null_for_void.html
    - avoid_returning_null_for_void

    # Avoid returning this from methods just to enable a fluent interface.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_returning_this.html
    # - avoid_returning_this

    # Avoid setters without getters.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_setters_without_getters.html
    - avoid_setters_without_getters

    # Avoid shadowing type parameters.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/avoid_shadowing_type_parameters.html
    - avoid_shadowing_type_parameters

    # Avoid single cascade in expression statements.
    # https://dart-lang.github.io/linter/lints/avoid_single_cascade_in_expression_statements.html
    # - avoid_single_cascade_in_expression_statements

    # Avoid annotating types for function expression parameters.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/avoid_types_on_closure_parameters.html
    - avoid_types_on_closure_parameters

    # Avoid unnecessary containers.
    # https://dart-lang.github.io/linter/lints/avoid_unnecessary_containers.html
    - avoid_unnecessary_containers

    # Avoid defining unused parameters in constructors.
    # https://dart-lang.github.io/linter/lints/avoid_unused_constructor_parameters.html
    - avoid_unused_constructor_parameters

    # Avoid async functions that return void.
    # https://dart-lang.github.io/linter/lints/avoid_void_async.html
    - avoid_void_async

    # Await only futures.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/await_only_futures.html
    - await_only_futures

    # Name extensions using UpperCamelCase.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/camel_case_extensions.html
    - camel_case_extensions

    # Name types using UpperCamelCase.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/camel_case_types.html
    - camel_case_types

    # Cascade consecutive method invocations on the same reference.
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    # - cascade_invocations

    # Don't cast a nullable value to a non nullable type.
    # (experimental)
    # https://dart-lang.github.io/linter/lints/cast_nullable_to_non_nullable.html
    # - cast_nullable_to_non_nullable

    # Prefer using lowerCamelCase for constant names.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/constant_identifier_names.html
    - constant_identifier_names

    # DO use curly braces for all flow control structures.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/curly_braces_in_flow_control_structures.html
    - curly_braces_in_flow_control_structures

    # Adhere to Effective Dart Guide directives sorting conventions.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/directives_ordering.html
    # - directives_ordering

    # Do not use environment declared variables.
    # https://dart-lang.github.io/linter/lints/do_not_use_environment.html
    # - do_not_use_environment

    # Avoid empty catch blocks.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/empty_catches.html
    - empty_catches

    # Use ; instead of {} for empty constructor bodies.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/empty_constructor_bodies.html
    - empty_constructor_bodies

    # Define case clauses for all constants in enum-like classes.
    # https://dart-lang.github.io/linter/lints/exhaustive_cases.html
    - exhaustive_cases

    # Name source files using lowercase_with_underscores.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/file_names.html
    - file_names

    # Use Flutter TODO format: // TODO(username): message, https://URL-to-issue.
    # https://dart-lang.github.io/linter/lints/flutter_style_todos.html
    # - flutter_style_todos

    # Don't import implementation files from another package.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/implementation_imports.html
    - implementation_imports
    
    # Join return statement with assignment when possible.
    # https://dart-lang.github.io/linter/lints/join_return_with_assignment.html
    - join_return_with_assignment

    # Start multiline strings with a newline.
    # https://dart-lang.github.io/linter/lints/leading_newlines_in_multiline_strings.html
    - leading_newlines_in_multiline_strings

    # Name libraries using lowercase_with_underscores.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/library_names.html
    - library_names

    # Use lowercase_with_underscores when specifying a library prefix.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/library_prefixes.html
    - library_prefixes

    # Avoid lines longer than 80 characters.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    # - lines_longer_than_80_chars

    # Missing whitespace between adjacent strings.
    # https://dart-lang.github.io/linter/lints/missing_whitespace_between_adjacent_strings.html
    - missing_whitespace_between_adjacent_strings

    # No default cases.
    # (experimental)
    # https://dart-lang.github.io/linter/lints/no_default_cases.html
    - no_default_cases

    # Avoid calling toString() on runtimeType.
    # https://dart-lang.github.io/linter/lints/no_runtimeType_toString.html
    - no_runtimeType_toString

    # Name non-constant identifiers using lowerCamelCase.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/non_constant_identifier_names.html
    - non_constant_identifier_names

    # Don't use null check on a potentially nullable type parameter.
    # (experimental)
    # https://dart-lang.github.io/linter/lints/null_check_on_nullable_type_parameter.html
    # - null_check_on_nullable_type_parameter

    # Do not pass null as an argument where a closure is expected.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/null_closures.html
    - null_closures

    # Omit type annotations for local variables.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    - omit_local_variable_types

    # Avoid defining a one-member abstract class when a simple function will do.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    # - one_member_abstracts

    # Only throw instances of classes extending either Exception or Error.
    # https://dart-lang.github.io/linter/lints/only_throw_errors.html
    - only_throw_errors

    # Don't override fields.
    # https://dart-lang.github.io/linter/lints/overridden_fields.html
    - overridden_fields

    # Provide doc comments for all public APIs.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/package_api_docs.html
    # - package_api_docs

    # Prefix library names with the package name and a dot-separated path.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/package_prefixed_library_names.html
    - package_prefixed_library_names

    # Don't reassign references to parameters of functions or methods.
    # https://dart-lang.github.io/linter/lints/parameter_assignments.html
    - parameter_assignments

    # Use adjacent strings to concatenate string literals.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_adjacent_string_concatenation.html
    - prefer_adjacent_string_concatenation

    # Prefer putting asserts in initializer list.
    # https://dart-lang.github.io/linter/lints/prefer_asserts_in_initializer_lists.html
    - prefer_asserts_in_initializer_lists

    # Prefer asserts with message.
    # https://dart-lang.github.io/linter/lints/prefer_asserts_with_message.html
    # - prefer_asserts_with_message

    # Prefer using a boolean as the assert condition.
    # https://dart-lang.github.io/linter/lints/prefer_bool_in_asserts.html
    # (deprecated)
    # - prefer_bool_in_asserts

    # Use collection literals when possible.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_collection_literals.html
    - prefer_collection_literals

    # Prefer using ??= over testing for null.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_conditional_assignment.html
    - prefer_conditional_assignment

    # Prefer const with constant constructors.
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors.html
    - prefer_const_constructors

    # Prefer declaring const constructors on @immutable classes.
    # https://dart-lang.github.io/linter/lints/prefer_const_constructors_in_immutables.html
    - prefer_const_constructors_in_immutables

    # Prefer const over final for declarations.
    # https://dart-lang.github.io/linter/lints/prefer_const_declarations.html
    - prefer_const_declarations

    # Prefer const literals as parameters of constructors on @immutable classes.
    # https://dart-lang.github.io/linter/lints/prefer_const_literals_to_create_immutables.html
    - prefer_const_literals_to_create_immutables

    # Prefer defining constructors instead of static methods to create instances.
    # https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html
    # - prefer_constructors_over_static_methods

    # Use contains for List and String instances.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_contains.html
    - prefer_contains

    # Prefer double quotes where they won't require escape sequences.
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    # - prefer_double_quotes

    # Use = to separate a named parameter from its default value.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_equal_for_default_values.html
    - prefer_equal_for_default_values

    # Use => for short members whose body is a single return statement.
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    # - prefer_expression_function_bodies

    # Private field could be final.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_final_fields.html
    - prefer_final_fields

    # Prefer final in for-each loop variable if reference is not reassigned.
    # https://dart-lang.github.io/linter/lints/prefer_final_in_for_each.html
    - prefer_final_in_for_each

    # Prefer final for variable declarations if they are not reassigned.
    # https://dart-lang.github.io/linter/lints/prefer_final_locals.html
    - prefer_final_locals

    # Prefer for elements when building maps from iterables.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_for_elements_to_map_fromIterable.html
    - prefer_for_elements_to_map_fromIterable

    # Use forEach to only apply a function to all the elements.
    # https://dart-lang.github.io/linter/lints/prefer_foreach.html
    # - prefer_foreach

    # Use a function declaration to bind a function to a name.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_function_declarations_over_variables.html
    - prefer_function_declarations_over_variables

    # Prefer generic function type aliases.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_generic_function_type_aliases.html
    - prefer_generic_function_type_aliases

    # Prefer if elements to conditional expressions where possible.
    # https://dart-lang.github.io/linter/lints/prefer_if_elements_to_conditional_expressions.html
    # - prefer_if_elements_to_conditional_expressions

    # Prefer using if null operators.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_if_null_operators.html
    - prefer_if_null_operators

    # Use initializing formals when possible.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html
    - prefer_initializing_formals

    # Inline list item declarations where possible.
    # https://dart-lang.github.io/linter/lints/prefer_inlined_adds.html
    - prefer_inlined_adds

    # Prefer int literals over double literals.
    # https://dart-lang.github.io/linter/lints/prefer_int_literals.html
    # - prefer_int_literals

    # Use interpolation to compose strings and values.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_interpolation_to_compose_strings.html
    - prefer_interpolation_to_compose_strings

    # Use isEmpty for Iterables and Maps.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_is_empty.html
    - prefer_is_empty

    # Use isNotEmpty for Iterables and Maps.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_is_not_empty.html
    - prefer_is_not_empty

    # Prefer is! operator.
    # https://dart-lang.github.io/linter/lints/prefer_is_not_operator.html
    - prefer_is_not_operator

    # Prefer to use whereType on iterable.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_iterable_whereType.html
    - prefer_iterable_whereType

    # Prefer using mixins.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/prefer_mixin.html
    - prefer_mixin

    # Prefer using null aware operators.
    # https://dart-lang.github.io/linter/lints/prefer_null_aware_operators.html
    - prefer_null_aware_operators

    # Only use double quotes for strings containing single quotes.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_single_quotes.html
    - prefer_single_quotes

    # Use spread collections when possible.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/prefer_spread_collections.html
    - prefer_spread_collections

    # Prefer typing uninitialized variables and fields.
    # https://dart-lang.github.io/linter/lints/prefer_typing_uninitialized_variables.html
    - prefer_typing_uninitialized_variables

    # Provide a deprecation message, via @Deprecated("message").
    # https://dart-lang.github.io/linter/lints/provide_deprecation_message.html
    - provide_deprecation_message

    # Document all public members.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    # - public_member_api_docs

    # Property getter recursively returns itself.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/recursive_getters.html
    - recursive_getters

    # SizedBox for whitespace.
    # https://dart-lang.github.io/linter/lints/sized_box_for_whitespace.html
    - sized_box_for_whitespace

    # Prefer using /// for doc comments.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/slash_for_doc_comments.html
    - slash_for_doc_comments

    # Sort child properties last in widget instance creations.
    # https://dart-lang.github.io/linter/lints/sort_child_properties_last.html
    # - sort_child_properties_last

    # Sort constructor declarations before other members.
    # https://dart-lang.github.io/linter/lints/sort_constructors_first.html
    # - sort_constructors_first

    # Sort unnamed constructor declarations first.
    # https://dart-lang.github.io/linter/lints/sort_unnamed_constructors_first.html
    # - sort_unnamed_constructors_first

    # Place the super call last in a constructor initialization list.
    # (deprecated)
    # https://dart-lang.github.io/linter/lints/super_goes_last.html
    # - super_goes_last

    # Tighten type of initializing formal.
    # https://dart-lang.github.io/linter/lints/tighten_type_of_initializing_formals.html
    # - tighten_type_of_initializing_formals

    # Type annotate public APIs.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/type_annotate_public_apis.html
    # - type_annotate_public_apis

    # Don't type annotate initializing formals.
    # [flutter] [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/type_init_formals.html
    - type_init_formals

    # Future results in async function bodies must be awaited or marked unawaited using package:pedantic.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/unawaited_futures.html
    - unawaited_futures

    # Unnecessary await keyword in return.
    # https://dart-lang.github.io/linter/lints/unnecessary_await_in_return.html
    # - unnecessary_await_in_return

    # Avoid using braces in interpolation when not needed.
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_brace_in_string_interps.html
    # - unnecessary_brace_in_string_interps

    # Avoid const keyword.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_const.html
    - unnecessary_const

    # Don't use final for local variables.
    # https://dart-lang.github.io/linter/lints/unnecessary_final.html
    # - unnecessary_final

    # Avoid wrapping fields in getters and setters just to be "safe".
    # [flutter] [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_getters_setters.html
    # - unnecessary_getters_setters

    # Don't create a lambda when a tear-off will do.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    # - unnecessary_lambdas

    # Unnecessary new keyword.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_new.html
    - unnecessary_new

    # Avoid null in null-aware assignment.
    # https://dart-lang.github.io/linter/lints/unnecessary_null_aware_assignments.html
    # - unnecessary_null_aware_assignments

    # Unnecessary null checks.
    # (experimental)
    # https://dart-lang.github.io/linter/lints/unnecessary_null_checks.html
    # - unnecessary_null_checks

    # Avoid using null in if null operators.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/unnecessary_null_in_if_null_operators.html
    - unnecessary_null_in_if_null_operators

    # Use a non-nullable type for a final variable initialized with a non-nullable value.
    # https://dart-lang.github.io/linter/lints/unnecessary_nullable_for_final_variable_declarations.html
    # - unnecessary_nullable_for_final_variable_declarations (experimental)

    # Don't override a method to do a super method invocation with the same parameters.
    # https://dart-lang.github.io/linter/lints/unnecessary_overrides.html
    # - unnecessary_overrides

    # Unnecessary parenthesis can be removed.
    # https://dart-lang.github.io/linter/lints/unnecessary_parenthesis.html
    # - unnecessary_parenthesis

    # Unnecessary raw string.
    # https://dart-lang.github.io/linter/lints/unnecessary_raw_strings.html
    # - unnecessary_raw_strings

    # Remove unnecessary backslashes in strings.
    # https://dart-lang.github.io/linter/lints/unnecessary_string_escapes.html
    # - unnecessary_string_escapes

    # Unnecessary string interpolation.
    # https://dart-lang.github.io/linter/lints/unnecessary_string_interpolations.html
    # - unnecessary_string_interpolations

    # Don't access members with this unless avoiding shadowing.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/unnecessary_this.html
    - unnecessary_this

    # Prefer an 8-digit hexadecimal integer(0xFFFFFFFF) to instantiate Color.
    # https://dart-lang.github.io/linter/lints/use_full_hex_values_for_flutter_colors.html
    # - use_full_hex_values_for_flutter_colors

    # Use generic function type syntax for parameters.
    # [pedantic]
    # https://dart-lang.github.io/linter/lints/use_function_type_syntax_for_parameters.html
    - use_function_type_syntax_for_parameters

    # Prefer intValue.isOdd/isEven instead of checking the result of % 2.
    # https://dart-lang.github.io/linter/lints/use_is_even_rather_than_modulo.html
    # - use_is_even_rather_than_modulo

    # Use late for private members with non-nullable type.
    # https://dart-lang.github.io/linter/lints/use_late_for_private_fields_and_variables.html
    # - use_late_for_private_fields_and_variables (experimental)

    # Use raw string to avoid escapes.
    # https://dart-lang.github.io/linter/lints/use_raw_strings.html
    # - use_raw_strings

    # Use rethrow to rethrow a caught exception.
    # [pedantic] [effective dart]
    # https://dart-lang.github.io/linter/lints/use_rethrow_when_possible.html
    - use_rethrow_when_possible

    # Use a setter for operations that conceptually change a property.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/use_setters_to_change_properties.html
    # - use_setters_to_change_properties

    # Use string buffers to compose strings.
    # https://dart-lang.github.io/linter/lints/use_string_buffers.html
    # - use_string_buffers

    # Start the name of the method with to/_to or as/_as if applicable.
    # [effective dart]
    # https://dart-lang.github.io/linter/lints/use_to_and_as_if_applicable.html
    # - use_to_and_as_if_applicable

    # Don't assign to void.
    # https://dart-lang.github.io/linter/lints/void_checks.html
    # - void_checks

    # Pub Rules

    # Use lowercase_with_underscores for package names.
    # [flutter]
    # https://dart-lang.github.io/linter/lints/package_names.html
    # - package_names

    # Sort pub dependencies.
    # https://dart-lang.github.io/linter/lints/sort_pub_dependencies.html
    # - sort_pub_dependencies
